// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id           String   @id @default(cuid())
  roleName     String   @unique          // e.g., "homeowner", "admin"
  displayName  String                   // Human-readable label
  description  String?
  permissions  String[]     
  users        User[]       @relation("UserRoles")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  @@index([roleName])
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  phone         String    @unique
  name          String
  password      String?
  image         String?
  status        Boolean   @default(true)
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  roles         Role[]       @relation("UserRoles")
  roleId        String?
}

model Category {
  id      String  @id @default(cuid())
  name    String  @unique
  slug   String   
  description String?
  image  String?
  services Service[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Service {
  id            String    @id @default(cuid())
  name          String
  description   String?
  image         String?
  categoryId    String
  category      Category  @relation(fields: [categoryId], references: [id])
  price         String
  duration      String?
  rating        Float?      @default(0)
  reviewCount   Int?        @default(0)
  featured      Boolean    @default(false)
  popular       Boolean    @default(false)
  isActive      Boolean    @default(true)
  new           Boolean    @default(false)
  isFavorite    Boolean    @default(false)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model ServiceProvider {
  id            String        @id @default(cuid())
  name          String
  bio           String?
  phone         String?
  email         String?       @unique
  verified      Boolean       @default(false)
  professionId  String
  // services      Service[]     // Services this provider offers
  rating        Float?        // Average rating
  reviews       Review[]
  createdAt     DateTime      @default(now())
}

model Review {
  id            String    @id @default(cuid())
  providerId     String
  provider       ServiceProvider  @relation(fields: [providerId], references: [id])
  rating         Int              @default(5)
  comment        String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}



